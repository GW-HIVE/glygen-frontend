%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.3 (Build 17D102) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 217 36
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 217 36
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HCGPMF+Georgia-Bold
%!FontType1-1.0: HCGPMF+Georgia-Bold 1.0000.5.0000
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /HCGPMF+Georgia-Bold def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /G put
dup 34 /l put
dup 35 /y put
dup 36 /e put
dup 37 /n put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1125 1 index div -621 2 index div 4237 3 index div 2252 5 -1 roll div]cvx def
/sfnts [<





732B732B
00>] def
/CharStrings 7 dict dup begin
/.notdef 0 def
/G 1 def
/e 2 def
/l 3 def
/n 4 def
/y 5 def
/uniF8FF.apple 6 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1125 -621 4237 2252}def
/UniqueID 4491834 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C977ACEB10D7B7CCAA782B3E10A4BEAFD6991C7A5E7DAF786CA93E9C229C6AEFCBF81F1A53350C7787CF5E2F927BEF3FEA1822D9E901E03D517BC65225F0EBC4FB173FF719156E7CCB386EB2BEB3CF26AC2190518717C342482A32B002F12EE9CDA02BD03A0C49ECE8B2489F0C0A15DC1455822728EA6F1EDC722870852EE92C67FD5C4E7DB3D3CFD51F72BF5CC158E172F8C2D590AFB500A14F2FC262E12668184FC174EA08FF214AF5A440B9CF010932CCF44F9D56168084B7D0AEA1AB20F6E9637C431019F90D4B931BBA29D219A1D15390DDFBE756B8D7DD10FC7B884928F46ABEBC599270A741040E75859057E8D6F229432F6DD8FD242CA4854E48DFCB42BF2CC19D952E1571C203408431F1EF731EC102A6E9B500399AB801444DF421EBD7C74386F8AC75C954C0C799B8A44C8B53363DAC86E0A003DB410F360069523D20FB0D838C78F6D4D572FB280D3C639C9E532F28DFB4B766C801B182306075ABD0C76977F61A7D7A2959B9ACCD53DB3DF413AE975E09C39A115B8D5B69EDE92AC117C85F1F00B593BB3D4CF7A55E76C73BFABF0F455546C911705B83FA83674B6CE71B389593F2DD6B05E247038E6E40471722F65AB96A888D4BC06E2820380D8482C663BEE7E4340267339DE85955413F8AB38510E111CA9CD14505D16E3FC80CF7A63CB0820BB40A70FAF06C8626AF71945D8F82A300017860943D2FF5B407952EB62D0F1EC043EB25F7283AD44A8ABC0DDCF422F9FF47A1DB8A97252D1F4EA
D6892A9EC553E501B30778DC731373490C10144BA92CF1858E2B3F7270BD5F107BF23065E968C5B759E54FBE522D9BD8D83C82DF926BA339BE8AFDEF5A38BBB56A24EB82C5FA195B429897895CA16294DD6EB5DADCB28B5B8DD0AFF9356D677D92902BC0172081833EBD3411F4FB98D85A6DB4786832E317BEB63B6517034B5007A917047BF8CC8C7EEDB362A23F22B6ADA7B60BED7706EEAAC9BA8468345036BC4F05C37A6DDA09A54B8F4695DD8D90C98932B006BEC5996EE0B1FAFCC9DCB634C2AF49E55E74365C19E7963E17C9DDE467889EE609E2516B5ECF048E7154E386D16727D48995AAA9790FAB723ECC19AF34D25FECF6771D00817F18D0A6FAAAD00820D88D1738A720C3D49A40E8DB20EBB252BDE45160244449CF6CF65996DA796619641A2F1C12398C61D87280204CDDB07DD278D986104446D74BB5E695A7FFBA0C15355296D0639FE898EACD6E14C631AE3F7289B38B4AC7BE65415CA628C7A373DF6DD4F48DB821BA93369FB8E66E0A4D9877F83DF7BBE0ECD54D9BD1B1AF71E0E922D2A14975ED9FBA2207931A4FB31721F9F6B2D0825318FE98E5C58706A7398BA14FF5A75D24382CC7AE11F576AD5DF14EEAE203211DFFDDE69D807594DA3A59E0AFCEF1BBF0CCA077C0D7D657DBF995BA6D728A6ADEBA63206AAF4B811585380632ABF4DEDCD0752F94A486571D864B9A91F2BC7BF0964B7D7DF82ECDF560F2841305A8FA71B3C8BBB0EB18A80CDF40C97EE0AF9E9C0367745C41CBDA662A04B4E47018FE12C616FB45EA953D09CE2B6706216465F3A9455763EFAAC6CFACBAB7F8DF2581B097F34BABC7E853B15540B18E6AEEC68B8DEB875887F48B5E163F345A5CB70FA4823A2BEEFAD225AA8A92CD964E7007D678F9182DF22918C35A3C7D7A6E1ACBA3C951E7B4FDBCD5D4F5B67009744CAC186CB9F2C00D534409AAF011171363A3D3B502986C1C1CB2ACDD6B8BCF430E61C4F655BBDFD9D01CFA11034B669939DA14AB353D696942FC02838BB6759FF4365E049649857657A5EB94EE388211BAB95F0AB54C0E028FA8132101D2B71A70D9EACD47B64FF4AFF322DAAF86E23A2FC5AC9D83DCD58549C2E8CF79EC54F38A3B1231DCB3B3116DABE544C5D4E276FE438B5983275B5E9E35DA4C4AAB75F0431035FE165772BC1F3DE6D7CEFB9666138830C66C22D2BEF5913D2F7CC0167FE74D55448938048895574983CE9ABE329980D0AB3425F6D41E572B88C7B3C359083506FBC6F7E436DAD854E30E7642E73656D704AAD87A2E0FD1F196A26796DEC0BFA86B5F839438B58A82AB18763117517807F27B4CD87358936A9C725EFF6501C8389459E8CC39E07EC92B43B955DCF961C2F2092569133E50AAE425A7303D626C028ED0CEB45D6267869ED419BB5145A9990C73DA799FD8804D55F085A34598C395B59B6405C759
338388959F286AA75B7C71D89DE97963C771290A92A7134D8FFDFF275679B4CBA1DFAE571615448112BDE67FDD2B1CEA99E1FAB9A9364A9D691E9A4C475CAD91A8C0B6D605548536C31253846AE48B56644CE1A3BECDB0E24162808D0CFEDD0069C48B7DB2D2097F71CF304B253539461C433EF5068A9094E6DCCA93E455601FEB85E09EB9B068EA7ED39C19B97873C41A00A1C6EAD3DD579792CDACC4A1336B566DBE17B2FC04C6624B82E328FBBB76D47998CA1B6771EDC897936DF3A29A62A124FC330892D1785D7E8ECC82057E9B8F0BC9318D18A618A0108C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HCGPMF+Georgia-Bold cguidfix
/F1.1/HCGPMF+Georgia-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
149.23347 4.0373902 m
160.892 47.547604 l
230.92162 28.783224 l
219.26309 -14.726991 l
h
176.79607 19.969069 m
176.79929 19.981096 176.81165 19.988234 176.82368 19.98501 c
203.34308 12.879156 l
203.35512 12.875934 203.36224 12.863572 203.35902 12.851545 c
203.3558 12.839519 203.34344 12.832381 203.33142 12.835604 c
176.81201 19.941458 l
176.79999 19.944681 176.79285 19.957043 176.79607 19.969069 c
h
174.38126 20.616116 m
174.02068 19.270424 174.81927 17.88722 176.16496 17.526644 c
202.68437 10.42079 l
204.03006 10.060212 205.41327 10.858806 205.77383 12.204497 c
206.13441 13.550189 205.33583 14.933393 203.99013 15.293971 c
177.47072 22.399824 l
176.12503 22.760403 174.74182 21.961809 174.38126 20.616116 c
h
W*
175.58865 20.292593 m
175.58865 20.292593 l
175.77055 20.971453 176.46834 21.374317 177.1472 21.192417 c
203.66661 14.086563 l
204.34547 13.904664 204.74834 13.206881 204.56644 12.528022 c
204.56644 12.528022 l
204.38454 11.849162 203.68675 11.446297 203.00789 11.628197 c
176.48848 18.734051 l
175.80963 18.915951 175.40675 19.613733 175.58865 20.292593 c
h
W*
0 0 217 36 rc
175.58865 20.292593 m
175.58865 20.292593 l
175.77055 20.971453 176.46834 21.374317 177.1472 21.192417 c
203.66661 14.086563 l
204.34547 13.904664 204.74834 13.206881 204.56644 12.528022 c
204.56644 12.528022 l
204.38454 11.849162 203.68675 11.446297 203.00789 11.628197 c
176.48848 18.734051 l
175.80963 18.915951 175.40675 19.613733 175.58865 20.292593 c
h
f
Q
5 w
q
175.58865 20.292593 m
175.58865 20.292593 l
175.77055 20.971453 176.46834 21.374317 177.1472 21.192417 c
203.66661 14.086563 l
204.34547 13.904664 204.74834 13.206881 204.56644 12.528022 c
204.56644 12.528022 l
204.38454 11.849162 203.68675 11.446297 203.00789 11.628197 c
176.48848 18.734051 l
175.80963 18.915951 175.40675 19.613733 175.58865 20.292593 c
h
W*
0 0 217 36 rc
0.25881904 0.96592581 0.96592581 -0.25881904 175.25931 19.06341 cm
1.2725443 0 m
1.2725443 0 l
1.9753511 0 2.5450885 0.56973749 2.5450885 1.2725443 c
2.5450885 28.727455 l
2.5450885 29.430262 1.9753511 30 1.2725443 30 c
1.2725443 30 l
0.56973749 30 0 29.430262 0 28.727455 c
0 1.2725443 l
0 0.56973749 0.56973749 0 1.2725443 0 c
h
S
Q
q
157.82663 50.255302 m
237.88028 50.255302 l
237.88028 -4.5074286 l
157.82663 -4.5074286 l
h
207.64632 18.577738 m
215.34041 27.747192 l
215.3484 27.756729 215.36263 27.757975 215.37216 27.749971 c
215.3817 27.741968 215.38295 27.727747 215.37494 27.71821 c
207.36908 18.177195 l
207.36475 18.17202 207.36169 18.17034 207.35556 18.169436 c
207.10056 18.131811 l
206.88126 17.996378 l
206.87486 17.992432 206.87048 17.991755 206.86337 17.993662 c
180.34396 25.099516 l
180.33192 25.102739 180.3248 25.115101 180.32802 25.127127 c
180.33124 25.139154 180.3436 25.146292 180.35562 25.143068 c
206.36523 18.173815 l
207.13445 17.967707 l
207.64632 18.577738 l
h
205.7312 20.184706 m
207.01228 20.588629 l
181.00267 27.557882 l
179.65698 27.918461 178.27377 27.119867 177.91321 25.774176 c
177.55263 24.428482 178.35121 23.045279 179.69691 22.684702 c
206.21632 15.578848 l
206.89568 15.396814 207.60834 15.507112 208.19481 15.869273 c
207.53802 16.932825 l
207.72049 15.696214 l
208.32626 15.785596 208.88272 16.091768 209.28419 16.570225 c
217.29005 26.11124 l
218.18556 27.178465 218.04636 28.769575 216.97914 29.665083 c
215.91191 30.560589 214.3208 30.421385 213.42529 29.35416 c
205.7312 20.184706 l
h
W*
206.68877 19.381222 m
214.38284 28.550676 l
214.83461 29.089058 215.63727 29.159283 216.17564 28.707527 c
216.71404 28.255772 216.78426 27.453106 216.3325 26.914724 c
208.32664 17.373709 l
208.11829 17.12541 207.8353 16.976688 207.53802 16.932825 c
207.25015 16.755054 206.89244 16.691776 206.53984 16.786255 c
180.02043 23.892109 l
179.34157 24.074009 178.93871 24.771791 179.12061 25.450651 c
179.30251 26.129511 180.00029 26.532375 180.67915 26.350475 c
206.68877 19.381222 l
h
W*
0 0 217 36 rc
206.68877 19.381222 m
214.38284 28.550676 l
214.83461 29.089058 215.63727 29.159283 216.17564 28.707527 c
216.71404 28.255772 216.78426 27.453106 216.3325 26.914724 c
208.32664 17.373709 l
208.11829 17.12541 207.8353 16.976688 207.53802 16.932825 c
207.25015 16.755054 206.89244 16.691776 206.53984 16.786255 c
180.02043 23.892109 l
179.34157 24.074009 178.93871 24.771791 179.12061 25.450651 c
179.30251 26.129511 180.00029 26.532375 180.67915 26.350475 c
206.68877 19.381222 l
h
f
Q
q
206.68877 19.381222 m
214.38284 28.550676 l
214.83461 29.089058 215.63727 29.159283 216.17564 28.707527 c
216.71404 28.255772 216.78426 27.453106 216.3325 26.914724 c
208.32664 17.373709 l
208.11829 17.12541 207.8353 16.976688 207.53802 16.932825 c
207.25015 16.755054 206.89244 16.691776 206.53984 16.786255 c
180.02043 23.892109 l
179.34157 24.074009 178.93871 24.771791 179.12061 25.450651 c
179.30251 26.129511 180.00029 26.532375 180.67915 26.350475 c
206.68877 19.381222 l
h
W*
0 0 217 36 rc
1 0 0 -1 178.81561 29 cm
27.873142 9.6187782 m
35.56723 0.44932333 l
36.018986 -0.089057915 36.821648 -0.15928195 37.360031 0.29247355 c
37.898411 0.74422908 37.968636 1.5468935 37.51688 2.0852747 c
29.511017 11.62629 l
29.30267 11.87459 29.019684 12.023311 28.722406 12.067175 c
28.434532 12.244946 28.076826 12.308225 27.724222 12.213745 c
1.2048147 5.1078911 l
0.52595544 4.9259911 0.12309022 4.2282081 0.30498999 3.5493488 c
0.48688978 2.8704896 1.1846728 2.4676244 1.8635321 2.6495242 c
27.873142 9.6187782 l
h
S
Q
q
220.26297 -16.507021 m
140.20932 -16.507021 l
140.20932 38.255711 l
220.26297 38.255711 l
h
170.44328 15.170546 m
162.74919 6.0010905 l
162.7412 5.9915524 162.72697 5.9903083 162.71744 5.9983115 c
162.7079 6.0063148 162.70665 6.020535 162.71466 6.0300727 c
170.72052 15.571089 l
170.72485 15.576262 170.72791 15.577943 170.73404 15.578846 c
170.98904 15.616472 l
171.20834 15.751905 l
171.21474 15.75585 171.21912 15.756527 171.22623 15.754621 c
197.74564 8.6487665 l
197.75768 8.6455441 197.7648 8.6331816 197.76158 8.6211557 c
197.75836 8.609129 197.746 8.6019917 197.73398 8.6052141 c
171.72437 15.574469 l
170.95515 15.780576 l
170.44328 15.170546 l
h
172.3584 13.563577 m
171.07732 13.159654 l
197.08693 6.1903996 l
198.43262 5.8298225 199.81583 6.6284156 200.17639 7.9741077 c
200.53697 9.3197994 199.73839 10.703004 198.39268 11.063581 c
171.87328 18.169436 l
171.19392 18.351469 170.48126 18.241171 169.89479 17.879009 c
170.55157 16.815458 l
170.36911 18.052069 l
169.76334 17.962687 169.20688 17.656513 168.8054 17.178057 c
160.79955 7.6370416 l
159.90404 6.5698171 160.04324 4.9787083 161.11046 4.0832005 c
162.17769 3.1876929 163.7688 3.3268967 164.66431 4.3941212 c
172.3584 13.563577 l
h
W*
171.40083 14.367061 m
163.70676 5.1976061 l
163.25499 4.6592245 162.45233 4.5890007 161.91396 5.0407562 c
161.37556 5.4925117 161.30534 6.295176 161.7571 6.8335571 c
169.76295 16.374573 l
169.97131 16.622871 170.2543 16.771593 170.55157 16.815458 c
170.83945 16.993229 171.19716 17.056507 171.54976 16.962027 c
198.06917 9.8561735 l
198.74803 9.6742735 199.15089 8.976491 198.96899 8.2976313 c
198.78709 7.618772 198.08931 7.2159071 197.41045 7.3978066 c
171.40083 14.367061 l
h
W*
0 0 217 36 rc
171.40083 14.367061 m
163.70676 5.1976061 l
163.25499 4.6592245 162.45233 4.5890007 161.91396 5.0407562 c
161.37556 5.4925117 161.30534 6.295176 161.7571 6.8335571 c
169.76295 16.374573 l
169.97131 16.622871 170.2543 16.771593 170.55157 16.815458 c
170.83945 16.993229 171.19716 17.056507 171.54976 16.962027 c
198.06917 9.8561735 l
198.74803 9.6742735 199.15089 8.976491 198.96899 8.2976313 c
198.78709 7.618772 198.08931 7.2159071 197.41045 7.3978066 c
171.40083 14.367061 l
h
f
Q
q
171.40083 14.367061 m
163.70676 5.1976061 l
163.25499 4.6592245 162.45233 4.5890007 161.91396 5.0407562 c
161.37556 5.4925117 161.30534 6.295176 161.7571 6.8335571 c
169.76295 16.374573 l
169.97131 16.622871 170.2543 16.771593 170.55157 16.815458 c
170.83945 16.993229 171.19716 17.056507 171.54976 16.962027 c
198.06917 9.8561735 l
198.74803 9.6742735 199.15089 8.976491 198.96899 8.2976313 c
198.78709 7.618772 198.08931 7.2159071 197.41045 7.3978066 c
171.40083 14.367061 l
h
W*
0 0 217 36 rc
-1 0 0 1 199.27399 4.7482824 cm
27.873142 9.6187782 m
35.56723 0.44932333 l
36.018986 -0.089057915 36.821648 -0.15928195 37.360031 0.29247355 c
37.898411 0.74422908 37.968636 1.5468935 37.51688 2.0852747 c
29.511017 11.62629 l
29.30267 11.87459 29.019684 12.023311 28.722406 12.067175 c
28.434532 12.244946 28.076826 12.308225 27.724222 12.213745 c
1.2048147 5.1078911 l
0.52595544 4.9259911 0.12309022 4.2282081 0.30498999 3.5493488 c
0.48688978 2.8704896 1.1846728 2.4676244 1.8635321 2.6495242 c
27.873142 9.6187782 l
h
S
Q
q
0 0 217 36 rc
1 0 0 -1 -1 41 cm
/F1.1[ 36 0 0 -36 0 0]sf
0 33 m
(!"#!$)[ 31.056641 14.392578 22.232422 31.056641 0.000000 ] xS
121.32227 33 m
(%)s
ep
end
